{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udd64 kele.el (Kubernetes Enablement Layer for Emacs)","text":"<p>Kele (k\u011b l\u00e8, or k\u0259-\u02c8l\u0259) (\u201cKubernetes Enablement Layer for Emacs\u201d) is a Kubernetes cluster management package. It empowers you to perform operations as coarse or fine-grained as you need, fast, and get back to your work. See How-Tos for example usage.</p> <p>Kele also comes with \u201cbatteries included.\u201d It contains several integrations with noteworthy packages, e.g. Embark, that you can take advantage of in your own configs.</p>  <p>Tip</p> <p>To learn more about how Kele compares to some other Kubernetes packages for Emacs, see: Explanations &gt; Comparisons with Similar Packages/Tools.</p>   <p>Note</p> <p>Kele is not an official Kubernetes project.</p>"},{"location":"#getting-started","title":"Getting Started","text":"The Hard WayUse-packageStraightUse-package + Straight   <p>Clone this repository and put it in your load-path.</p> <pre><code>(require 'kele)\n(kele-mode 1)\n</code></pre>   <pre><code>(use-package kele\n  :config\n  (kele-mode 1))\n</code></pre>   <pre><code>(straight-use-package kele)\n(kele-mode 1)\n</code></pre>   <pre><code>(use-package kele\n  :straight t\n  :config\n  (kele-mode 1))\n</code></pre>"},{"location":"#design-ethos","title":"Design Ethos","text":"<p>Kele aims to have PLANS. Namely, it aims to be:</p> <ul> <li>Performant: if it is easier/faster for you to simply use <code>kubectl</code> to get   the info you need instead of Kele, then Kele has failed;</li> <li>Lightweight: minimally intrusive, minimize context-switching, keep   \u201cembellishments\u201d to a minimum;</li> <li>Agile: get you the answers you need \u2013 and let you return to your other   work \u2013 as quickly as possible;</li> <li>Nimble: get you as coarse/detailed insight as needed at any given point,   with no compromise to any of the other tenets listed here;</li> <li>Smart: provide sensible defaults and interfaces that \u201cjust make sense\u201d.</li> </ul>"},{"location":"#about-the-name","title":"About the Name","text":"<p>The name Kele comes from the Mandarin term for cola, \u53ef\u4e50 (k\u011b l\u00e8). It is also an abbreviation of \u201cKubernetes Enablement Layer for Emacs.\u201d</p>"},{"location":"explanations/comparisons/","title":"Comparisons with Similar Packages/Tools","text":"<p>This page compares Kele with some of its peer packages.</p>  <p>Note</p> <p>Given Kele\u2019s relative infancy, this page compares less on concrete features and capabilities and more on design philosophy and overall goals. All packages listed here are, as of today, far more feature-complete than Kele.</p>"},{"location":"explanations/comparisons/#kubernetes-el","title":"kubernetes-el","text":"<p>kubernetes-el is a Kubernetes cluster management package for Emacs. It draws heavy inspiration from Magit, from its \u201cstatus page\u201d-centric interface design down to its prevalent use of Transient-based keybindings.</p> <p>Kele itself draws inspiration from kubernetes-el. In fact, the author of Kele is a co-maintainer of kubernetes-el.</p> <p>Kele draws from some lessons learned during kubernetes-el development and strives for a cluster management experience that has PLANS. More specifically, it aims for a Kubernetes cluster management experience that is less intrusive, requires less context-switching, and is overall more performant than kubernetes-el. If Kele proves to be flexible enough that kubernetes-el could be re-implemented on top of Kele, then that\u2019s a sign that we\u2019ve done a good job here.</p>"},{"location":"explanations/comparisons/#kubel","title":"kubel","text":"<p>kubel is a similar \u201cUI-centric\u201d cluster management package to kubernetes-el. Its advantage over kubernetes-el is its accommodation of users with limited privilege/permissions within the clusters in question.</p> <p>Similar to kubernetes-el, Kele focuses on providing a cluster management experience that is more \u201cpiecemeal\u201d (\u201cget this targeted piece of information as quickly as possible and move on with your life\u201d) and requires less context-switching \u2013 unavoidable with a status-page-centric user interface \u2013 than kubel.</p>"},{"location":"explanations/design/","title":"Design","text":"<p>This page goes into some of the design particulars of Kele. As an end user, feel free to explore at your curiosity, but rest assured that none of the information here is strictly necessary for your successful use of Kele.</p>  <p>Tip</p> <p>This page may at times contain forward-looking statements, e.g. of design details that are upcoming but have not yet made their way into the main branch.</p>"},{"location":"explanations/design/#caches","title":"Caches","text":"<p>Kele revolves around two main in-memory caches:</p> <ul> <li>One that maintains the <code>kubeconfig</code> contents (<code>kele--kubeconfig</code>);</li> <li>One that maintains the discovery cache in-memory (<code>kele--discovery-cache</code>).</li> </ul> <p>Both of these caches are populated asynchronously on <code>kele-mode</code> initialization. They are kept in sync via file watches, which allows Kele to only incur read costs when they\u2019re actually needed. This is particularly useful for the <code>kubeconfig</code> cache, since the Kubeconfig itself is only occasionally modified in response to discrete user events, such as switching context or the default namespace for a given context. In combination with asynchronous IO via the <code>async</code> package, Kele is able to keep itself in sync with the underlying Kube configurations and caches without deadlocking users\u2019 Emacs environment.</p> <p>Notably, all read operations within Kele are based primarily on these two caches. This helps keep filesystem read/write overhead at a minimum and keep things snappy.</p>"},{"location":"how-tos/","title":"How-Tos","text":"<p>This section contains how-to guides. These are targeted, goal-oriented explanations of how to carry out common tasks with Kele.</p>"},{"location":"how-tos/integrations/","title":"Integrations","text":"<p>Kele contains several integrations with select packages.</p>"},{"location":"how-tos/integrations/#awesome-tray","title":"awesome-tray","text":"<p><code>awesome-tray</code> \u201cfolds\u201d the modeline into the minibuffer for a compact UI.</p> <p>Kele ships with <code>awesome-tray</code> integration that will display the current context and namespace in your \u201cmodeline.\u201d</p>  <p>To enable, simply add <code>\"kele\"</code> to your desired place in <code>awesome-tray-active-modules</code>, like so:</p> <pre><code>(add-to-list 'awesome-tray-active-modules \"kele\" t)\n</code></pre>"},{"location":"how-tos/usage/","title":"Usage","text":"<p>Note</p> <p>You\u2019ll notice this page is pretty sparse. Kele is an early-stage package with lots of room to grow. Stay tuned for more!</p>"},{"location":"how-tos/usage/#contexts","title":"Contexts","text":""},{"location":"how-tos/usage/#switching-contexts","title":"Switching contexts","text":"<pre><code>M-x kele-context-switch\n</code></pre> <p>This can also be done via Embark on any selection candidate in any other context-related Kele command, e.g. <code>kele-context-rename</code>.</p>"},{"location":"how-tos/usage/#renaming-a-context","title":"Renaming a context","text":"<pre><code>M-x kele-context-rename\n</code></pre> <p>This can also be done via Embark on any selection candidate in any other context-related Kele command, e.g. <code>kele-context-switch</code>.</p>"},{"location":"how-tos/usage/#namespaces","title":"Namespaces","text":""},{"location":"how-tos/usage/#switching-for-any-context","title":"Switching for any context","text":"<pre><code>M-x kele-namespace-switch-for-context\n</code></pre>"},{"location":"how-tos/usage/#switching-for-current-context","title":"Switching for current context","text":"<pre><code>M-x kele-namespace-switch-for-current-context\n</code></pre>"},{"location":"references/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented here.</p> <p>The format is based on Keep a Changelog, and this project adheres to semantic versioning.</p>"},{"location":"references/changelog/#upcoming","title":"Upcoming","text":""},{"location":"references/changelog/#011","title":"0.1.1","text":""},{"location":"references/changelog/#added","title":"Added","text":"<ul> <li>Kubeconfig file watching is now asynchronous and therefore non-blocking!</li> <li>Kubeconfig file watching now prints a progress report denoting when changes   were detected (and thus reading has begun asynchronously) and when reading has   completed</li> </ul>"},{"location":"references/changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed an issue where proxies were being created for the current context,   regardless of which context it was actually requested for</li> <li>Fixed an issue in <code>kele-namespace-switch-for-context</code> where the selection   candidates were pulled for the current context rather than the argument   context</li> <li>Fixed an issue where attempting to pull completion candidates via queries to   the proxy API server resulted in an error, as well as multiple proxy server   processes being inadvertently spun up for the same context</li> <li>Fixed an issue where custom kubeconfig path is not respected by <code>kubectl</code>   invocations</li> </ul>"},{"location":"references/changelog/#changed","title":"Changed","text":"<ul> <li>Removed dependency: <code>requests</code></li> <li>Added dependency: <code>plz</code></li> <li>Added dependency: <code>async</code></li> </ul>"},{"location":"references/changelog/#010","title":"0.1.0","text":"<p>Kele is born!</p> <p>This initial release of Kele has a very simple goal: \u201c<code>kubectx</code> and <code>kubens</code>, but make it Emacs.\u201d Its feature set is limited but lays the foundation \u2013 both in terms of implementation and \u201cdesign philosophy\u201d \u2013 for future enhancements.</p>"},{"location":"references/changelog/#added_1","title":"Added","text":"<ul> <li>Added ability to switch and rename contexts, with completion and caching</li> <li>Added ability to switch namespaces for any given context</li> </ul>"}]}